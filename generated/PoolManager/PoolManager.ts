// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { Address, BigInt, Bytes, ethereum, TypedMap } from '@graphprotocol/graph-ts'

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this)
  }
}

export class Approval__Params {
  _event: Approval

  constructor(event: Approval) {
    this._event = event
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }
}

export class Donate extends ethereum.Event {
  get params(): Donate__Params {
    return new Donate__Params(this)
  }
}

export class Donate__Params {
  _event: Donate

  constructor(event: Donate) {
    this._event = event
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes()
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get amount0(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }

  get amount1(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }
}

export class Initialize extends ethereum.Event {
  get params(): Initialize__Params {
    return new Initialize__Params(this)
  }
}

export class Initialize__Params {
  _event: Initialize

  constructor(event: Initialize) {
    this._event = event
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes()
  }

  get currency0(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get currency1(): Address {
    return this._event.parameters[2].value.toAddress()
  }

  get fee(): i32 {
    return this._event.parameters[3].value.toI32()
  }

  get tickSpacing(): i32 {
    return this._event.parameters[4].value.toI32()
  }

  get hooks(): Address {
    return this._event.parameters[5].value.toAddress()
  }

  get sqrtPriceX96(): BigInt {
    return this._event.parameters[6].value.toBigInt()
  }

  get tick(): i32 {
    return this._event.parameters[7].value.toI32()
  }
}

export class ModifyLiquidity extends ethereum.Event {
  get params(): ModifyLiquidity__Params {
    return new ModifyLiquidity__Params(this)
  }
}

export class ModifyLiquidity__Params {
  _event: ModifyLiquidity

  constructor(event: ModifyLiquidity) {
    this._event = event
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes()
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get tickLower(): i32 {
    return this._event.parameters[2].value.toI32()
  }

  get tickUpper(): i32 {
    return this._event.parameters[3].value.toI32()
  }

  get liquidityDelta(): BigInt {
    return this._event.parameters[4].value.toBigInt()
  }

  get salt(): Bytes {
    return this._event.parameters[5].value.toBytes()
  }
}

export class OperatorSet extends ethereum.Event {
  get params(): OperatorSet__Params {
    return new OperatorSet__Params(this)
  }
}

export class OperatorSet__Params {
  _event: OperatorSet

  constructor(event: OperatorSet) {
    this._event = event
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean()
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this)
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred

  constructor(event: OwnershipTransferred) {
    this._event = event
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress()
  }
}

export class ProtocolFeeControllerUpdated extends ethereum.Event {
  get params(): ProtocolFeeControllerUpdated__Params {
    return new ProtocolFeeControllerUpdated__Params(this)
  }
}

export class ProtocolFeeControllerUpdated__Params {
  _event: ProtocolFeeControllerUpdated

  constructor(event: ProtocolFeeControllerUpdated) {
    this._event = event
  }

  get protocolFeeController(): Address {
    return this._event.parameters[0].value.toAddress()
  }
}

export class ProtocolFeeUpdated extends ethereum.Event {
  get params(): ProtocolFeeUpdated__Params {
    return new ProtocolFeeUpdated__Params(this)
  }
}

export class ProtocolFeeUpdated__Params {
  _event: ProtocolFeeUpdated

  constructor(event: ProtocolFeeUpdated) {
    this._event = event
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes()
  }

  get protocolFee(): i32 {
    return this._event.parameters[1].value.toI32()
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this)
  }
}

export class Swap__Params {
  _event: Swap

  constructor(event: Swap) {
    this._event = event
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes()
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get amount0(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }

  get amount1(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }

  get sqrtPriceX96(): BigInt {
    return this._event.parameters[4].value.toBigInt()
  }

  get liquidity(): BigInt {
    return this._event.parameters[5].value.toBigInt()
  }

  get tick(): i32 {
    return this._event.parameters[6].value.toI32()
  }

  get fee(): i32 {
    return this._event.parameters[7].value.toI32()
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this)
  }
}

export class Transfer__Params {
  _event: Transfer

  constructor(event: Transfer) {
    this._event = event
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress()
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt()
  }
}

export class PoolManager__donateInputKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress()
  }

  get currency1(): Address {
    return this[1].toAddress()
  }

  get fee(): i32 {
    return this[2].toI32()
  }

  get tickSpacing(): i32 {
    return this[3].toI32()
  }

  get hooks(): Address {
    return this[4].toAddress()
  }
}

export class PoolManager__initializeInputKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress()
  }

  get currency1(): Address {
    return this[1].toAddress()
  }

  get fee(): i32 {
    return this[2].toI32()
  }

  get tickSpacing(): i32 {
    return this[3].toI32()
  }

  get hooks(): Address {
    return this[4].toAddress()
  }
}

export class PoolManager__modifyLiquidityResult {
  value0: BigInt
  value1: BigInt

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0
    this.value1 = value1
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>()
    map.set('value0', ethereum.Value.fromSignedBigInt(this.value0))
    map.set('value1', ethereum.Value.fromSignedBigInt(this.value1))
    return map
  }

  getCallerDelta(): BigInt {
    return this.value0
  }

  getFeesAccrued(): BigInt {
    return this.value1
  }
}

export class PoolManager__modifyLiquidityInputKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress()
  }

  get currency1(): Address {
    return this[1].toAddress()
  }

  get fee(): i32 {
    return this[2].toI32()
  }

  get tickSpacing(): i32 {
    return this[3].toI32()
  }

  get hooks(): Address {
    return this[4].toAddress()
  }
}

export class PoolManager__modifyLiquidityInputParamsStruct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32()
  }

  get tickUpper(): i32 {
    return this[1].toI32()
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt()
  }

  get salt(): Bytes {
    return this[3].toBytes()
  }
}

export class PoolManager__swapInputKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress()
  }

  get currency1(): Address {
    return this[1].toAddress()
  }

  get fee(): i32 {
    return this[2].toI32()
  }

  get tickSpacing(): i32 {
    return this[3].toI32()
  }

  get hooks(): Address {
    return this[4].toAddress()
  }
}

export class PoolManager__swapInputParamsStruct extends ethereum.Tuple {
  get zeroForOne(): boolean {
    return this[0].toBoolean()
  }

  get amountSpecified(): BigInt {
    return this[1].toBigInt()
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt()
  }
}

export class PoolManager extends ethereum.SmartContract {
  static bind(address: Address): PoolManager {
    return new PoolManager('PoolManager', address)
  }

  allowance(owner: Address, spender: Address, id: BigInt): BigInt {
    const result = super.call('allowance', 'allowance(address,address,uint256):(uint256)', [
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(id),
    ])

    return result[0].toBigInt()
  }

  try_allowance(owner: Address, spender: Address, id: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall('allowance', 'allowance(address,address,uint256):(uint256)', [
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(id),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  approve(spender: Address, id: BigInt, amount: BigInt): boolean {
    const result = super.call('approve', 'approve(address,uint256,uint256):(bool)', [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(id),
      ethereum.Value.fromUnsignedBigInt(amount),
    ])

    return result[0].toBoolean()
  }

  try_approve(spender: Address, id: BigInt, amount: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall('approve', 'approve(address,uint256,uint256):(bool)', [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(id),
      ethereum.Value.fromUnsignedBigInt(amount),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  balanceOf(owner: Address, id: BigInt): BigInt {
    const result = super.call('balanceOf', 'balanceOf(address,uint256):(uint256)', [
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromUnsignedBigInt(id),
    ])

    return result[0].toBigInt()
  }

  try_balanceOf(owner: Address, id: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall('balanceOf', 'balanceOf(address,uint256):(uint256)', [
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromUnsignedBigInt(id),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  collectProtocolFees(recipient: Address, currency: Address, amount: BigInt): BigInt {
    const result = super.call('collectProtocolFees', 'collectProtocolFees(address,address,uint256):(uint256)', [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromAddress(currency),
      ethereum.Value.fromUnsignedBigInt(amount),
    ])

    return result[0].toBigInt()
  }

  try_collectProtocolFees(recipient: Address, currency: Address, amount: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall('collectProtocolFees', 'collectProtocolFees(address,address,uint256):(uint256)', [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromAddress(currency),
      ethereum.Value.fromUnsignedBigInt(amount),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  donate(key: PoolManager__donateInputKeyStruct, amount0: BigInt, amount1: BigInt, hookData: Bytes): BigInt {
    const result = super.call(
      'donate',
      'donate((address,address,uint24,int24,address),uint256,uint256,bytes):(int256)',
      [
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(amount0),
        ethereum.Value.fromUnsignedBigInt(amount1),
        ethereum.Value.fromBytes(hookData),
      ],
    )

    return result[0].toBigInt()
  }

  try_donate(
    key: PoolManager__donateInputKeyStruct,
    amount0: BigInt,
    amount1: BigInt,
    hookData: Bytes,
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'donate',
      'donate((address,address,uint24,int24,address),uint256,uint256,bytes):(int256)',
      [
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(amount0),
        ethereum.Value.fromUnsignedBigInt(amount1),
        ethereum.Value.fromBytes(hookData),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  extsload(slot: Bytes): Bytes {
    const result = super.call('extsload', 'extsload(bytes32):(bytes32)', [ethereum.Value.fromFixedBytes(slot)])

    return result[0].toBytes()
  }

  try_extsload(slot: Bytes): ethereum.CallResult<Bytes> {
    const result = super.tryCall('extsload', 'extsload(bytes32):(bytes32)', [ethereum.Value.fromFixedBytes(slot)])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBytes())
  }

  extsload1(startSlot: Bytes, nSlots: BigInt): Array<Bytes> {
    const result = super.call('extsload', 'extsload(bytes32,uint256):(bytes32[])', [
      ethereum.Value.fromFixedBytes(startSlot),
      ethereum.Value.fromUnsignedBigInt(nSlots),
    ])

    return result[0].toBytesArray()
  }

  try_extsload1(startSlot: Bytes, nSlots: BigInt): ethereum.CallResult<Array<Bytes>> {
    const result = super.tryCall('extsload', 'extsload(bytes32,uint256):(bytes32[])', [
      ethereum.Value.fromFixedBytes(startSlot),
      ethereum.Value.fromUnsignedBigInt(nSlots),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBytesArray())
  }

  extsload2(slots: Array<Bytes>): Array<Bytes> {
    const result = super.call('extsload', 'extsload(bytes32[]):(bytes32[])', [
      ethereum.Value.fromFixedBytesArray(slots),
    ])

    return result[0].toBytesArray()
  }

  try_extsload2(slots: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    const result = super.tryCall('extsload', 'extsload(bytes32[]):(bytes32[])', [
      ethereum.Value.fromFixedBytesArray(slots),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBytesArray())
  }

  exttload(slots: Array<Bytes>): Array<Bytes> {
    const result = super.call('exttload', 'exttload(bytes32[]):(bytes32[])', [
      ethereum.Value.fromFixedBytesArray(slots),
    ])

    return result[0].toBytesArray()
  }

  try_exttload(slots: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    const result = super.tryCall('exttload', 'exttload(bytes32[]):(bytes32[])', [
      ethereum.Value.fromFixedBytesArray(slots),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBytesArray())
  }

  exttload1(slot: Bytes): Bytes {
    const result = super.call('exttload', 'exttload(bytes32):(bytes32)', [ethereum.Value.fromFixedBytes(slot)])

    return result[0].toBytes()
  }

  try_exttload1(slot: Bytes): ethereum.CallResult<Bytes> {
    const result = super.tryCall('exttload', 'exttload(bytes32):(bytes32)', [ethereum.Value.fromFixedBytes(slot)])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBytes())
  }

  initialize(key: PoolManager__initializeInputKeyStruct, sqrtPriceX96: BigInt, hookData: Bytes): i32 {
    const result = super.call(
      'initialize',
      'initialize((address,address,uint24,int24,address),uint160,bytes):(int24)',
      [
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceX96),
        ethereum.Value.fromBytes(hookData),
      ],
    )

    return result[0].toI32()
  }

  try_initialize(
    key: PoolManager__initializeInputKeyStruct,
    sqrtPriceX96: BigInt,
    hookData: Bytes,
  ): ethereum.CallResult<i32> {
    const result = super.tryCall(
      'initialize',
      'initialize((address,address,uint24,int24,address),uint160,bytes):(int24)',
      [
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceX96),
        ethereum.Value.fromBytes(hookData),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toI32())
  }

  isOperator(owner: Address, operator: Address): boolean {
    const result = super.call('isOperator', 'isOperator(address,address):(bool)', [
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromAddress(operator),
    ])

    return result[0].toBoolean()
  }

  try_isOperator(owner: Address, operator: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall('isOperator', 'isOperator(address,address):(bool)', [
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromAddress(operator),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  modifyLiquidity(
    key: PoolManager__modifyLiquidityInputKeyStruct,
    params: PoolManager__modifyLiquidityInputParamsStruct,
    hookData: Bytes,
  ): PoolManager__modifyLiquidityResult {
    const result = super.call(
      'modifyLiquidity',
      'modifyLiquidity((address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes):(int256,int256)',
      [ethereum.Value.fromTuple(key), ethereum.Value.fromTuple(params), ethereum.Value.fromBytes(hookData)],
    )

    return new PoolManager__modifyLiquidityResult(result[0].toBigInt(), result[1].toBigInt())
  }

  try_modifyLiquidity(
    key: PoolManager__modifyLiquidityInputKeyStruct,
    params: PoolManager__modifyLiquidityInputParamsStruct,
    hookData: Bytes,
  ): ethereum.CallResult<PoolManager__modifyLiquidityResult> {
    const result = super.tryCall(
      'modifyLiquidity',
      'modifyLiquidity((address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes):(int256,int256)',
      [ethereum.Value.fromTuple(key), ethereum.Value.fromTuple(params), ethereum.Value.fromBytes(hookData)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(
      new PoolManager__modifyLiquidityResult(value[0].toBigInt(), value[1].toBigInt()),
    )
  }

  owner(): Address {
    const result = super.call('owner', 'owner():(address)', [])

    return result[0].toAddress()
  }

  try_owner(): ethereum.CallResult<Address> {
    const result = super.tryCall('owner', 'owner():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  protocolFeeController(): Address {
    const result = super.call('protocolFeeController', 'protocolFeeController():(address)', [])

    return result[0].toAddress()
  }

  try_protocolFeeController(): ethereum.CallResult<Address> {
    const result = super.tryCall('protocolFeeController', 'protocolFeeController():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  protocolFeesAccrued(currency: Address): BigInt {
    const result = super.call('protocolFeesAccrued', 'protocolFeesAccrued(address):(uint256)', [
      ethereum.Value.fromAddress(currency),
    ])

    return result[0].toBigInt()
  }

  try_protocolFeesAccrued(currency: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall('protocolFeesAccrued', 'protocolFeesAccrued(address):(uint256)', [
      ethereum.Value.fromAddress(currency),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  setOperator(operator: Address, approved: boolean): boolean {
    const result = super.call('setOperator', 'setOperator(address,bool):(bool)', [
      ethereum.Value.fromAddress(operator),
      ethereum.Value.fromBoolean(approved),
    ])

    return result[0].toBoolean()
  }

  try_setOperator(operator: Address, approved: boolean): ethereum.CallResult<boolean> {
    const result = super.tryCall('setOperator', 'setOperator(address,bool):(bool)', [
      ethereum.Value.fromAddress(operator),
      ethereum.Value.fromBoolean(approved),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  supportsInterface(interfaceId: Bytes): boolean {
    const result = super.call('supportsInterface', 'supportsInterface(bytes4):(bool)', [
      ethereum.Value.fromFixedBytes(interfaceId),
    ])

    return result[0].toBoolean()
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    const result = super.tryCall('supportsInterface', 'supportsInterface(bytes4):(bool)', [
      ethereum.Value.fromFixedBytes(interfaceId),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  swap(key: PoolManager__swapInputKeyStruct, params: PoolManager__swapInputParamsStruct, hookData: Bytes): BigInt {
    const result = super.call(
      'swap',
      'swap((address,address,uint24,int24,address),(bool,int256,uint160),bytes):(int256)',
      [ethereum.Value.fromTuple(key), ethereum.Value.fromTuple(params), ethereum.Value.fromBytes(hookData)],
    )

    return result[0].toBigInt()
  }

  try_swap(
    key: PoolManager__swapInputKeyStruct,
    params: PoolManager__swapInputParamsStruct,
    hookData: Bytes,
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'swap',
      'swap((address,address,uint24,int24,address),(bool,int256,uint160),bytes):(int256)',
      [ethereum.Value.fromTuple(key), ethereum.Value.fromTuple(params), ethereum.Value.fromBytes(hookData)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  transfer(receiver: Address, id: BigInt, amount: BigInt): boolean {
    const result = super.call('transfer', 'transfer(address,uint256,uint256):(bool)', [
      ethereum.Value.fromAddress(receiver),
      ethereum.Value.fromUnsignedBigInt(id),
      ethereum.Value.fromUnsignedBigInt(amount),
    ])

    return result[0].toBoolean()
  }

  try_transfer(receiver: Address, id: BigInt, amount: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall('transfer', 'transfer(address,uint256,uint256):(bool)', [
      ethereum.Value.fromAddress(receiver),
      ethereum.Value.fromUnsignedBigInt(id),
      ethereum.Value.fromUnsignedBigInt(amount),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  transferFrom(sender: Address, receiver: Address, id: BigInt, amount: BigInt): boolean {
    const result = super.call('transferFrom', 'transferFrom(address,address,uint256,uint256):(bool)', [
      ethereum.Value.fromAddress(sender),
      ethereum.Value.fromAddress(receiver),
      ethereum.Value.fromUnsignedBigInt(id),
      ethereum.Value.fromUnsignedBigInt(amount),
    ])

    return result[0].toBoolean()
  }

  try_transferFrom(sender: Address, receiver: Address, id: BigInt, amount: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall('transferFrom', 'transferFrom(address,address,uint256,uint256):(bool)', [
      ethereum.Value.fromAddress(sender),
      ethereum.Value.fromAddress(receiver),
      ethereum.Value.fromUnsignedBigInt(id),
      ethereum.Value.fromUnsignedBigInt(amount),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  unlock(data: Bytes): Bytes {
    const result = super.call('unlock', 'unlock(bytes):(bytes)', [ethereum.Value.fromBytes(data)])

    return result[0].toBytes()
  }

  try_unlock(data: Bytes): ethereum.CallResult<Bytes> {
    const result = super.tryCall('unlock', 'unlock(bytes):(bytes)', [ethereum.Value.fromBytes(data)])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBytes())
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this)
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this)
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall

  constructor(call: ApproveCall) {
    this._call = call
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall

  constructor(call: ApproveCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this)
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this)
  }
}

export class BurnCall__Inputs {
  _call: BurnCall

  constructor(call: BurnCall) {
    this._call = call
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class BurnCall__Outputs {
  _call: BurnCall

  constructor(call: BurnCall) {
    this._call = call
  }
}

export class ClearCall extends ethereum.Call {
  get inputs(): ClearCall__Inputs {
    return new ClearCall__Inputs(this)
  }

  get outputs(): ClearCall__Outputs {
    return new ClearCall__Outputs(this)
  }
}

export class ClearCall__Inputs {
  _call: ClearCall

  constructor(call: ClearCall) {
    this._call = call
  }

  get currency(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }
}

export class ClearCall__Outputs {
  _call: ClearCall

  constructor(call: ClearCall) {
    this._call = call
  }
}

export class CollectProtocolFeesCall extends ethereum.Call {
  get inputs(): CollectProtocolFeesCall__Inputs {
    return new CollectProtocolFeesCall__Inputs(this)
  }

  get outputs(): CollectProtocolFeesCall__Outputs {
    return new CollectProtocolFeesCall__Outputs(this)
  }
}

export class CollectProtocolFeesCall__Inputs {
  _call: CollectProtocolFeesCall

  constructor(call: CollectProtocolFeesCall) {
    this._call = call
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get currency(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class CollectProtocolFeesCall__Outputs {
  _call: CollectProtocolFeesCall

  constructor(call: CollectProtocolFeesCall) {
    this._call = call
  }

  get amountCollected(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class DonateCall extends ethereum.Call {
  get inputs(): DonateCall__Inputs {
    return new DonateCall__Inputs(this)
  }

  get outputs(): DonateCall__Outputs {
    return new DonateCall__Outputs(this)
  }
}

export class DonateCall__Inputs {
  _call: DonateCall

  constructor(call: DonateCall) {
    this._call = call
  }

  get key(): DonateCallKeyStruct {
    return changetype<DonateCallKeyStruct>(this._call.inputValues[0].value.toTuple())
  }

  get amount0(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }

  get amount1(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }

  get hookData(): Bytes {
    return this._call.inputValues[3].value.toBytes()
  }
}

export class DonateCall__Outputs {
  _call: DonateCall

  constructor(call: DonateCall) {
    this._call = call
  }

  get delta(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class DonateCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress()
  }

  get currency1(): Address {
    return this[1].toAddress()
  }

  get fee(): i32 {
    return this[2].toI32()
  }

  get tickSpacing(): i32 {
    return this[3].toI32()
  }

  get hooks(): Address {
    return this[4].toAddress()
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this)
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this)
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall

  constructor(call: InitializeCall) {
    this._call = call
  }

  get key(): InitializeCallKeyStruct {
    return changetype<InitializeCallKeyStruct>(this._call.inputValues[0].value.toTuple())
  }

  get sqrtPriceX96(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }

  get hookData(): Bytes {
    return this._call.inputValues[2].value.toBytes()
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall

  constructor(call: InitializeCall) {
    this._call = call
  }

  get tick(): i32 {
    return this._call.outputValues[0].value.toI32()
  }
}

export class InitializeCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress()
  }

  get currency1(): Address {
    return this[1].toAddress()
  }

  get fee(): i32 {
    return this[2].toI32()
  }

  get tickSpacing(): i32 {
    return this[3].toI32()
  }

  get hooks(): Address {
    return this[4].toAddress()
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this)
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this)
  }
}

export class MintCall__Inputs {
  _call: MintCall

  constructor(call: MintCall) {
    this._call = call
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class MintCall__Outputs {
  _call: MintCall

  constructor(call: MintCall) {
    this._call = call
  }
}

export class ModifyLiquidityCall extends ethereum.Call {
  get inputs(): ModifyLiquidityCall__Inputs {
    return new ModifyLiquidityCall__Inputs(this)
  }

  get outputs(): ModifyLiquidityCall__Outputs {
    return new ModifyLiquidityCall__Outputs(this)
  }
}

export class ModifyLiquidityCall__Inputs {
  _call: ModifyLiquidityCall

  constructor(call: ModifyLiquidityCall) {
    this._call = call
  }

  get key(): ModifyLiquidityCallKeyStruct {
    return changetype<ModifyLiquidityCallKeyStruct>(this._call.inputValues[0].value.toTuple())
  }

  get params(): ModifyLiquidityCallParamsStruct {
    return changetype<ModifyLiquidityCallParamsStruct>(this._call.inputValues[1].value.toTuple())
  }

  get hookData(): Bytes {
    return this._call.inputValues[2].value.toBytes()
  }
}

export class ModifyLiquidityCall__Outputs {
  _call: ModifyLiquidityCall

  constructor(call: ModifyLiquidityCall) {
    this._call = call
  }

  get callerDelta(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }

  get feesAccrued(): BigInt {
    return this._call.outputValues[1].value.toBigInt()
  }
}

export class ModifyLiquidityCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress()
  }

  get currency1(): Address {
    return this[1].toAddress()
  }

  get fee(): i32 {
    return this[2].toI32()
  }

  get tickSpacing(): i32 {
    return this[3].toI32()
  }

  get hooks(): Address {
    return this[4].toAddress()
  }
}

export class ModifyLiquidityCallParamsStruct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32()
  }

  get tickUpper(): i32 {
    return this[1].toI32()
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt()
  }

  get salt(): Bytes {
    return this[3].toBytes()
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this)
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this)
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall

  constructor(call: SetOperatorCall) {
    this._call = call
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean()
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall

  constructor(call: SetOperatorCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}

export class SetProtocolFeeCall extends ethereum.Call {
  get inputs(): SetProtocolFeeCall__Inputs {
    return new SetProtocolFeeCall__Inputs(this)
  }

  get outputs(): SetProtocolFeeCall__Outputs {
    return new SetProtocolFeeCall__Outputs(this)
  }
}

export class SetProtocolFeeCall__Inputs {
  _call: SetProtocolFeeCall

  constructor(call: SetProtocolFeeCall) {
    this._call = call
  }

  get key(): SetProtocolFeeCallKeyStruct {
    return changetype<SetProtocolFeeCallKeyStruct>(this._call.inputValues[0].value.toTuple())
  }

  get newProtocolFee(): i32 {
    return this._call.inputValues[1].value.toI32()
  }
}

export class SetProtocolFeeCall__Outputs {
  _call: SetProtocolFeeCall

  constructor(call: SetProtocolFeeCall) {
    this._call = call
  }
}

export class SetProtocolFeeCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress()
  }

  get currency1(): Address {
    return this[1].toAddress()
  }

  get fee(): i32 {
    return this[2].toI32()
  }

  get tickSpacing(): i32 {
    return this[3].toI32()
  }

  get hooks(): Address {
    return this[4].toAddress()
  }
}

export class SetProtocolFeeControllerCall extends ethereum.Call {
  get inputs(): SetProtocolFeeControllerCall__Inputs {
    return new SetProtocolFeeControllerCall__Inputs(this)
  }

  get outputs(): SetProtocolFeeControllerCall__Outputs {
    return new SetProtocolFeeControllerCall__Outputs(this)
  }
}

export class SetProtocolFeeControllerCall__Inputs {
  _call: SetProtocolFeeControllerCall

  constructor(call: SetProtocolFeeControllerCall) {
    this._call = call
  }

  get controller(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class SetProtocolFeeControllerCall__Outputs {
  _call: SetProtocolFeeControllerCall

  constructor(call: SetProtocolFeeControllerCall) {
    this._call = call
  }
}

export class SettleCall extends ethereum.Call {
  get inputs(): SettleCall__Inputs {
    return new SettleCall__Inputs(this)
  }

  get outputs(): SettleCall__Outputs {
    return new SettleCall__Outputs(this)
  }
}

export class SettleCall__Inputs {
  _call: SettleCall

  constructor(call: SettleCall) {
    this._call = call
  }
}

export class SettleCall__Outputs {
  _call: SettleCall

  constructor(call: SettleCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class SettleForCall extends ethereum.Call {
  get inputs(): SettleForCall__Inputs {
    return new SettleForCall__Inputs(this)
  }

  get outputs(): SettleForCall__Outputs {
    return new SettleForCall__Outputs(this)
  }
}

export class SettleForCall__Inputs {
  _call: SettleForCall

  constructor(call: SettleForCall) {
    this._call = call
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class SettleForCall__Outputs {
  _call: SettleForCall

  constructor(call: SettleForCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this)
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this)
  }
}

export class SwapCall__Inputs {
  _call: SwapCall

  constructor(call: SwapCall) {
    this._call = call
  }

  get key(): SwapCallKeyStruct {
    return changetype<SwapCallKeyStruct>(this._call.inputValues[0].value.toTuple())
  }

  get params(): SwapCallParamsStruct {
    return changetype<SwapCallParamsStruct>(this._call.inputValues[1].value.toTuple())
  }

  get hookData(): Bytes {
    return this._call.inputValues[2].value.toBytes()
  }
}

export class SwapCall__Outputs {
  _call: SwapCall

  constructor(call: SwapCall) {
    this._call = call
  }

  get swapDelta(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class SwapCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress()
  }

  get currency1(): Address {
    return this[1].toAddress()
  }

  get fee(): i32 {
    return this[2].toI32()
  }

  get tickSpacing(): i32 {
    return this[3].toI32()
  }

  get hooks(): Address {
    return this[4].toAddress()
  }
}

export class SwapCallParamsStruct extends ethereum.Tuple {
  get zeroForOne(): boolean {
    return this[0].toBoolean()
  }

  get amountSpecified(): BigInt {
    return this[1].toBigInt()
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt()
  }
}

export class SyncCall extends ethereum.Call {
  get inputs(): SyncCall__Inputs {
    return new SyncCall__Inputs(this)
  }

  get outputs(): SyncCall__Outputs {
    return new SyncCall__Outputs(this)
  }
}

export class SyncCall__Inputs {
  _call: SyncCall

  constructor(call: SyncCall) {
    this._call = call
  }

  get currency(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class SyncCall__Outputs {
  _call: SyncCall

  constructor(call: SyncCall) {
    this._call = call
  }
}

export class TakeCall extends ethereum.Call {
  get inputs(): TakeCall__Inputs {
    return new TakeCall__Inputs(this)
  }

  get outputs(): TakeCall__Outputs {
    return new TakeCall__Outputs(this)
  }
}

export class TakeCall__Inputs {
  _call: TakeCall

  constructor(call: TakeCall) {
    this._call = call
  }

  get currency(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class TakeCall__Outputs {
  _call: TakeCall

  constructor(call: TakeCall) {
    this._call = call
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this)
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this)
  }
}

export class TransferCall__Inputs {
  _call: TransferCall

  constructor(call: TransferCall) {
    this._call = call
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class TransferCall__Outputs {
  _call: TransferCall

  constructor(call: TransferCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this)
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this)
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall

  constructor(call: TransferFromCall) {
    this._call = call
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt()
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall

  constructor(call: TransferFromCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this)
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this)
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall

  constructor(call: TransferOwnershipCall) {
    this._call = call
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall

  constructor(call: TransferOwnershipCall) {
    this._call = call
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this)
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this)
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall

  constructor(call: UnlockCall) {
    this._call = call
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes()
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall

  constructor(call: UnlockCall) {
    this._call = call
  }

  get result(): Bytes {
    return this._call.outputValues[0].value.toBytes()
  }
}

export class UpdateDynamicLPFeeCall extends ethereum.Call {
  get inputs(): UpdateDynamicLPFeeCall__Inputs {
    return new UpdateDynamicLPFeeCall__Inputs(this)
  }

  get outputs(): UpdateDynamicLPFeeCall__Outputs {
    return new UpdateDynamicLPFeeCall__Outputs(this)
  }
}

export class UpdateDynamicLPFeeCall__Inputs {
  _call: UpdateDynamicLPFeeCall

  constructor(call: UpdateDynamicLPFeeCall) {
    this._call = call
  }

  get key(): UpdateDynamicLPFeeCallKeyStruct {
    return changetype<UpdateDynamicLPFeeCallKeyStruct>(this._call.inputValues[0].value.toTuple())
  }

  get newDynamicLPFee(): i32 {
    return this._call.inputValues[1].value.toI32()
  }
}

export class UpdateDynamicLPFeeCall__Outputs {
  _call: UpdateDynamicLPFeeCall

  constructor(call: UpdateDynamicLPFeeCall) {
    this._call = call
  }
}

export class UpdateDynamicLPFeeCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress()
  }

  get currency1(): Address {
    return this[1].toAddress()
  }

  get fee(): i32 {
    return this[2].toI32()
  }

  get tickSpacing(): i32 {
    return this[3].toI32()
  }

  get hooks(): Address {
    return this[4].toAddress()
  }
}
